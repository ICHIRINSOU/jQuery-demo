{"mappings":"AAI8BA,OAAvBC,OAAS,SAAUC,GACtB,IAAIC,EAOI,MANsB,iBAApBD,EACNC,EAAWC,SAASC,iBAAiBH,GAC/BA,aAA2BI,QACjCH,EAAWD,GAGR,CACHK,SAASC,GACL,IAAK,IAAIC,EAAE,EAAEA,EAAEN,EAASO,OAAOD,IAAI,CACfN,EAASM,GACjBE,UAAUC,IAAIJ,GAE1B,OAAOK,MAEXC,KAAKN,GACD,IAAIO,EAAM,GACA,IAAL,IAAIN,EAAG,EAAEA,EAAEN,EAASO,OAAOD,IAAI,CAChC,MAAMO,EAAOV,MAAMW,KAAKd,EAASM,GAAGJ,iBAAiBG,IACmBO,EAAhEA,EAAMG,OAAOF,GAEzB,OAAQf,OAAOc","sources":["src/jquery.js"],"sourcesContent":["//jq接收一个选择器（或数组）selectorOrArray，\n//可以通过querySelector获得一个（或者多个）元素elements，\n//然后返回一个对象api，可以操控元素elements\n\nwindow.jQuery = function (selectorOrArray){ //  传参\n    let elements //声明e\n    if(typeof selectorOrArray === 'string'){ // 参是字符串\n        elements = document.querySelectorAll(selectorOrArray) //    e = 选择器筛选后的元素（有可能是多个元素）\n    }else if (selectorOrArray instanceof Array){\n        elements = selectorOrArray //   此时e = 数组\n    }\n\n    return {\n        addClass(className){\n            for (let i=0;i<elements.length;i++){ // 遍历元素们\n                const element = elements[i];\n                element.classList.add(className) // 在每一个元素上增加相同的className\n            }\n            return this //  返回 api => **api**.addClass()\n        },\n        find(className){ // 查找元素中的其他元素\n            let array=[] // 声明空数组a\n            for (let i =0;i<elements.length;i++){ //    遍历元素们\n                const flag = Array.from(elements[i].querySelectorAll(className)) // 将 【元素中的符合条件的子元素（们）（它们是伪数组）】通过arrayfrom转化为真正的数组\n                array = array.concat(flag) //   每次循环拼接所有的符合条件的子元素，最后拼接成包含所有符合条件元素的数组\n            }\n            return  jQuery(array) //    返回一个新的api\n        },\n    }\n}"],"names":["window","jQuery","selectorOrArray","elements","document","querySelectorAll","Array","addClass","className","i","length","classList","add","this","find","array","flag","from","concat"],"version":3,"file":"index.e0614768.js.map"}