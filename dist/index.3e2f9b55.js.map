{"mappings":"AAAA,0DAAgC;AACN,0EAAc;AACN,0DAAN;AAEE,MAAxB,CAAC,MAAM,GAAG,SAAU,eAAe,EAAC;IACtC,IAAI,QAAQ,CAAC,SAAK;IAAN;IACR,IAAD,OAAO,eAAe,KAAK,QAAQ,EAClC,QAAQ,GAAG,QAAQ,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC,mEAA6B;IAA9B;SACb,IAAlC,eAAe,YAAY,KAAK,EACtC,QAAQ,GAAG,eAAe,CAAC,qBAAa;IAAd;IAGtB,OAAD;QACH,QAAQ,EAAC,SAAS,EAAC;YACf,IAAK,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,QAAQ,CAAC,MAAM,EAAC,CAAC,EAAE,CAAC;gBAC/B,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,AAAC;gBAC5B,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,gDAAwB;;aACpC;YACzB,OAAO,IAAI,CAAC,oCAAgC;aAAjC;SACV;QACL,IAAI,EAAC,SAAS,EAAC;YACX,IAAI,KAAK,GAAC,EAAE,CAAC,mBAAS;YAAV;YACF,IAAL,IAAI,CAAC,GAAE,CAAC,EAAC,CAAC,GAAC,QAAQ,CAAC,MAAM,EAAC,CAAC,EAAE,CAAC;gBAChC,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,yHAAiD;gBAAlD;gBACQ,KAAnE,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,iHAAyC;gBAA1C;aAC2C;YACzE,OAAQ,MAAM,CAAC,KAAK,CAAC,CAAC,2BAAe;aAAhB;SACxB;KACJ,CAAA;CACJ","sources":["src/jquery.js"],"sourcesContent":["//jq接收一个选择器（或数组）selectorOrArray，\n//可以通过querySelector获得一个（或者多个）元素elements，\n//然后返回一个对象api，可以操控元素elements\n\nwindow.jQuery = function (selectorOrArray){ //  传参\n    let elements //声明e\n    if(typeof selectorOrArray === 'string'){ // 参是字符串\n        elements = document.querySelectorAll(selectorOrArray) //    e = 选择器筛选后的元素（有可能是多个元素）\n    }else if (selectorOrArray instanceof Array){\n        elements = selectorOrArray //   此时e = 数组\n    }\n\n    return {\n        addClass(className){\n            for (let i=0;i<elements.length;i++){ // 遍历元素们\n                const element = elements[i];\n                element.classList.add(className) // 在每一个元素上增加相同的className\n            }\n            return this //  返回 api => **api**.addClass()\n        },\n        find(className){ // 查找元素中的其他元素\n            let array=[] // 声明空数组a\n            for (let i =0;i<elements.length;i++){ //    遍历元素们\n                const flag = Array.from(elements[i].querySelectorAll(className)) // 将 【元素中的符合条件的子元素（们）（它们是伪数组）】通过arrayfrom转化为真正的数组\n                array = array.concat(flag) //   每次循环拼接所有的符合条件的子元素，最后拼接成包含所有符合条件元素的数组\n            }\n            return  jQuery(array) //    返回一个新的api\n        },\n    }\n}"],"names":[],"version":3,"file":"index.3e2f9b55.js.map","sourceRoot":"/__parcel_source_root/"}